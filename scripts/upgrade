#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
#REMOVEME? ynh_script_progression --message="Loading installation settings..."

#REMOVEME? app="$YNH_APP_INSTANCE_NAME"

#REMOVEME? #REMOVEME? install_dir=$(ynh_app_setting_get --app="$app" --key=install_dir)

#REMOVEME? domain=$(ynh_app_setting_get --app="$app" --key=domain)
#REMOVEME? port=$(ynh_app_setting_get --app="$app" --key=port)
#REMOVEME? path=$(ynh_app_setting_get --app="$app" --key=path)

#REMOVEME? client_max_body_size=$(ynh_app_setting_get --app="$app" --key=client_max_body_size)

#REMOVEME? db_name=$(ynh_app_setting_get --app="$app" --key=db_name)
#REMOVEME? db_user=$(ynh_app_setting_get --app="$app" --key=db_user)
#REMOVEME? db_pwd=$(ynh_app_setting_get --app="$app" --key=db_pwd)

#REMOVEME? data_dir=$(ynh_app_setting_get --app="$app" --key=data_dir)

#REMOVEME? instance_expose_peers=$(ynh_app_setting_get --app="$app" --key=instance_expose_peers)
#REMOVEME? instance_expose_suspended=$(ynh_app_setting_get --app="$app" --key=instance_expose_suspended)
#REMOVEME? instance_deliver_to_shared_inboxes=$(ynh_app_setting_get --app="$app" --key=instance_deliver_to_shared_inboxes)

#REMOVEME? accounts_registration_open=$(ynh_app_setting_get --app="$app" --key=accounts_registration_open)
#REMOVEME? accounts_approval_required=$(ynh_app_setting_get --app="$app" --key=accounts_approval_required)
#REMOVEME? accounts_reason_required=$(ynh_app_setting_get --app="$app" --key=accounts_reason_required)
#REMOVEME? accounts_allow_custom_css=$(ynh_app_setting_get --app="$app" --key=accounts_allow_custom_css)

#REMOVEME? media_image_max_size=$(ynh_app_setting_get --app="$app" --key=media_image_max_size)
#REMOVEME? media_video_max_size=$(ynh_app_setting_get --app="$app" --key=media_video_max_size)
#REMOVEME? media_description_min_chars=$(ynh_app_setting_get --app="$app" --key=media_description_min_chars)
#REMOVEME? media_description_max_chars=$(ynh_app_setting_get --app="$app" --key=media_description_max_chars)
#REMOVEME? media_remote_cache_days=$(ynh_app_setting_get --app="$app" --key=media_remote_cache_days)
#REMOVEME? media_emoji_local_max_size=$(ynh_app_setting_get --app="$app" --key=media_emoji_local_max_size)
#REMOVEME? media_emoji_remote_max_size=$(ynh_app_setting_get --app="$app" --key=media_emoji_remote_max_size)

#REMOVEME? statuses_max_chars=$(ynh_app_setting_get --app="$app" --key=statuses_max_chars)
#REMOVEME? statuses_cw_max_chars=$(ynh_app_setting_get --app="$app" --key=statuses_cw_max_chars)
#REMOVEME? statuses_poll_max_options=$(ynh_app_setting_get --app="$app" --key=statuses_poll_max_options)
#REMOVEME? statuses_poll_option_max_chars=$(ynh_app_setting_get --app="$app" --key=statuses_poll_option_max_chars)
#REMOVEME? statuses_media_max_files=$(ynh_app_setting_get --app="$app" --key=statuses_media_max_files)

#=================================================
# CHECK VERSION
#=================================================

### This helper will compare the version of the currently installed app and the version of the upstream package.
### $upgrade_type can have 2 different values
### - UPGRADE_APP if the upstream app version has changed
### - UPGRADE_PACKAGE if only the YunoHost package has changed
### ynh_check_app_version_changed will stop the upgrade if the app is up to date.
### UPGRADE_APP should be used to upgrade the core app only if there's an upgrade to do.
upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
#REMOVEME? ynh_script_progression --message="Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
#REMOVEME? ynh_backup_before_upgrade
#REMOVEME? ynh_clean_setup () {
	# Restore it if the upgrade fails
#REMOVEME? 	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
#REMOVEME? ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..."

ynh_systemd_action --service_name="$app" --action="stop" --log_path="/var/log/$app/$app.log"

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..."

# Upgrade from <0.2.1~ynh4:
if ynh_compare_current_package_version --comparison lt --version 0.2.1~ynh4 || [ -z "$db_user" ]
then
	# import old parameters
#REMOVEME? 	registration_open=$(ynh_app_setting_get --app="$app" --key=registration_open)
#REMOVEME? 	registration_approval=$(ynh_app_setting_get --app="$app" --key=registration_approval)
#REMOVEME? 	registration_reason=$(ynh_app_setting_get --app="$app" --key=registration_reason)
	# declaration of new parameters
	client_max_body_size="100M"
	media_image_max_size="2097152"
	media_video_max_size="10485760"
	media_description_min_chars="0"
	media_description_max_chars="500"
	media_remote_cache_days="30"
	statuses_max_chars="5000"
	statuses_cw_max_chars="100"
	statuses_poll_max_options="6"
	statuses_poll_option_max_chars="50"
	statuses_media_max_files="6"
	# conversion of old parameters
	registration_open=$(convert_bool "$registration_open")
	registration_approval=$(convert_bool "$registration_approval")
	registration_reason=$(convert_bool "$registration_reason")
	# fix db_user existence
	db_user=$db_name
#REMOVEME? 	ynh_app_setting_set --app="$app" --key=db_user --value="$db_user"
	# registration of new parameters
	ynh_app_setting_set --app="$app" --key=client_max_body_size --value="$client_max_body_size"
	ynh_app_setting_set --app="$app" --key=media_image_max_size --value="$media_image_max_size"
	ynh_app_setting_set --app="$app" --key=media_video_max_size --value="$media_video_max_size"
	ynh_app_setting_set --app="$app" --key=media_description_min_chars --value="$media_description_min_chars"
	ynh_app_setting_set --app="$app" --key=media_description_max_chars --value="$media_description_max_chars"
	ynh_app_setting_set --app="$app" --key=media_remote_cache_days --value="$media_remote_cache_days"
	ynh_app_setting_set --app="$app" --key=statuses_max_chars --value="$statuses_max_chars"
	ynh_app_setting_set --app="$app" --key=statuses_cw_max_chars --value="$statuses_cw_max_chars"
	ynh_app_setting_set --app="$app" --key=statuses_poll_max_options --value="$statuses_poll_max_options"
	ynh_app_setting_set --app="$app" --key=statuses_poll_option_max_chars --value="$statuses_poll_option_max_chars"
	ynh_app_setting_set --app="$app" --key=statuses_media_max_files --value="$statuses_media_max_files"
	# registration of converted parameters
	ynh_app_setting_set --app="$app" --key=registration_open --value="$registration_open"
	ynh_app_setting_set --app="$app" --key=registration_approval --value="$registration_approval"
	ynh_app_setting_set --app="$app" --key=registration_reason --value="$registration_reason"
fi

# Upgrade from <0.3.7~ynh1:
if ynh_compare_current_package_version --comparison lt --version 0.3.7~ynh1 || [ -z "$instance_expose_peers" ]
then
	# import old parameters
#REMOVEME? 	registration_open=$(ynh_app_setting_get --app="$app" --key=registration_open)
#REMOVEME? 	registration_approval=$(ynh_app_setting_get --app="$app" --key=registration_approval)
#REMOVEME? 	registration_reason=$(ynh_app_setting_get --app="$app" --key=registration_reason)
	# declaration of new parameters
	instance_expose_peers="false"
	instance_expose_suspended="false"
	# conversion of old parameters
	if [ "$registration_open" = "true" ] || [ "$registration_open" = "false" ]; then
		accounts_registration_open=$registration_open
		accounts_approval_required=$registration_approval
		accounts_reason_required=$registration_reason
	else
		accounts_registration_open="false"
		accounts_approval_required="true"
		accounts_reason_required="false"
	fi
	# registration of new parameters
	ynh_app_setting_set --app="$app" --key=instance_expose_peers --value="$instance_expose_peers"
	ynh_app_setting_set --app="$app" --key=instance_expose_suspended --value="$instance_expose_suspended"
	# registration of converted parameters
	ynh_app_setting_set --app="$app" --key=accounts_registration_open --value="$accounts_registration_open"
	ynh_app_setting_set --app="$app" --key=accounts_approval_required --value="$accounts_approval_required"
	ynh_app_setting_set --app="$app" --key=accounts_reason_required --value="$accounts_reason_required"
	# deletion of old parameters
	ynh_app_setting_delete  --app="$app" --key=registration_open
	ynh_app_setting_delete  --app="$app" --key=registration_approval
	ynh_app_setting_delete  --app="$app" --key=registration_reason
fi

# Upgrade from <0.5.0~ynh1:
if ynh_compare_current_package_version --comparison lt --version 0.5.0~ynh1 || [ -z "$accounts_allow_custom_css" ]
then
	# declaration of new parameters
	accounts_allow_custom_css="false"
	instance_deliver_to_shared_inboxes="true"
	media_emoji_local_max_size="51200"
	media_emoji_remote_max_size="102400"
	# registration of new parameters
	ynh_app_setting_set --app="$app" --key=accounts_allow_custom_css --value="$accounts_allow_custom_css"
	ynh_app_setting_set --app="$app" --key=instance_deliver_to_shared_inboxes --value="$instance_deliver_to_shared_inboxes"
	ynh_app_setting_set --app="$app" --key=media_emoji_local_max_size --value="$media_emoji_local_max_size"
	ynh_app_setting_set --app="$app" --key=media_emoji_remote_max_size --value="$media_emoji_remote_max_size"
fi

#=================================================
# CREATE DEDICATED USER
#=================================================
#REMOVEME? ynh_script_progression --message="Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
#REMOVEME? ynh_system_user_create --username="$app" --home_dir="$install_dir"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..."

	# detect_arch comes from _common.sh / personnal helpers
	architecture=$(detect_arch)
	
	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$install_dir" --source_id="$architecture" --keep="config.yaml"
fi

# FIXME: this should be managed by the core in the future
# Here, as a packager, you may have to tweak the ownerhsip/permissions
# such that the appropriate users (e.g. maybe www-data) can access
# files in some cases.
# But FOR THE LOVE OF GOD, do not allow r/x for "others" on the entire folder -
# this will be treated as a security issue.
chmod 750 "$install_dir"
chmod -R o-rwx "$install_dir"
chown -R "$app:www-data" "$install_dir"

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading NGINX web server configuration..."

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
#REMOVEME? ynh_script_progression --message="Upgrading dependencies..."

#REMOVEME? ynh_exec_warn_less ynh_install_app_dependencies "$pkg_dependencies"

#=================================================
# UPDATE A CONFIG FILE
#=================================================
ynh_script_progression --message="Updating a configuration file..."

### Same as during install
###
### The file will automatically be backed-up if it's found to be manually modified (because
### ynh_add_config keeps track of the file's checksum)

ynh_add_config --template="config.yaml" --destination="$install_dir/config.yaml"

# FIXME: this should be handled by the core in the future
# You may need to use chmod 600 instead of 400,
# for example if the app is expected to be able to modify its own config
chmod 400 "$install_dir/config.yaml"
chown "$app:$app" "$install_dir/config.yaml"

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Upgrading systemd configuration..."

# Create a dedicated systemd config
ynh_add_systemd_config

#=================================================
# GENERIC FINALIZATION
#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..."

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..."

yunohost service add "$app" --description="Gotosocial server" --log="/var/log/$app/$app.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..."

ynh_systemd_action --service_name="$app" --action="start" --log_path="/var/log/$app/$app.log"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading NGINX web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed"
